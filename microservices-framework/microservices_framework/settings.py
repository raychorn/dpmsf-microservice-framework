"""
Django settings for microservices_framework project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

import os, sys
from os import environ
from pathlib import Path

def getVersionID():
    import sys
    return '{}{}'.format(int(sys.version_info.major), int(sys.version_info.minor))

BASE_DIR = Path(__file__).resolve().parent
if (DEBUG):
    print('DEBUG: BASE_DIR -> {}.'.format(BASE_DIR))

# BEGIN: This is required.
pylib3 = os.sep.join([os.path.dirname(BASE_DIR), 'python_lib3', 'vyperlogix{}.zip'.format(getVersionID())])
if (not os.path.exists(pylib3)):
    pylib3 = os.path.dirname(pylib3)
    assert os.path.exists(pylib3) and os.path.isdir(pylib3), 'Problem. Cannot find development {} in {}.'.format(os.path.basename(pylib3), os.path.dirname(pylib3))
else:
    assert os.path.exists(pylib3) and os.path.isfile(pylib3), 'Problem. Cannot find deployment {} in {}.'.format(os.path.basename(pylib3), os.path.dirname(pylib3))
sys.path.insert(0, pylib3)
# END!!! This is required.

if (DEBUG):
    for f in sys.path:
        print(f)

from vyperlogix.misc import _utils
from vyperlogix.env import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
__version = _utils.getVersionFloat()
assert (__version >= 3.00) and (__version < 3.90), 'Incompatible Python Version. Must use Python 3.x or later. __version -> {}'.format(__version)

environ.load_env(environ=os.environ, cwd=BASE_DIR, verbose=False)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'bz$h33y1n&p-%_10ko@1dtaf$ys1la7xpi)0thw+t_zm&04r!-'

ALLOWED_HOSTS = [
    '127.0.0.1',
    'vyperlogixcorp1.uc.r.appspot.com'
]

ADMINS = (
    ('Admin', 'no-reply@vyperlogix.com'),
)

MANAGERS = ADMINS
# Application definition

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

INSTALLED_APPS = (
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'microservices_framework.views',
)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'microservices_framework.urls'

TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")
print('DEBUG: TEMPLATES_DIR -> {} exists -> {}.'.format(TEMPLATES_DIR, os.path.exists(TEMPLATES_DIR) and os.path.isdir(TEMPLATES_DIR)))

from vyperlogix.django.findDjangoTemplateDirsIn import findDjangoTemplateDirsIn
TEMPLATES_DIR = findDjangoTemplateDirsIn([TEMPLATES_DIR,], dir_name=BASE_DIR, contains='templates')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': TEMPLATES_DIR,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'microservices_framework.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR , 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
print('STATICFILES_DIRS -> {}'.format(STATICFILES_DIRS))

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
    }
}
    